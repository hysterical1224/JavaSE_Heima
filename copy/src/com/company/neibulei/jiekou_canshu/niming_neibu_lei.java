package com.company.neibulei.jiekou_canshu;
/*
* 匿名内部类的前提
*存在一个类或者接口，这里的类可以是具体类也可以是抽象类
*匿名内部类的格式
*格式：new 类名 ( ) { 重写方法 } new 接口名 ( ) { 重写方法 }
*
* 匿名内部类的本质
* 本质：是一个继承了该类或者实现了该接口的子类匿名对象
* 匿名内部类的细节
* 匿名内部类可以通过多态的形式接受

* */


public class niming_neibu_lei {
    /*
    * 匿名内部类是一种特殊类型的内部类，它没有显式的类名，并且在创建对象时直接定义类的实现或继承关系。
    * 它通常用于创建实现某个接口或继承某个类的对象，并且只在特定场景下使用一次。
    * 使用匿名内部类可以简化代码，并且无需显式定义一个新的类。
    * 它的语法形式通常是在创建对象的同时，通过大括号内的代码块来定义类的实现或继承关系。
    * 匿名内部类通常用于简单的回调函数或事件处理器，因为它可以直接在需要的地方定义，并且无需额外的类定义。
    * 然而，由于它没有类名，因此无法在其他地方重复使用，且无法定义构造函数和静态成员。
    * 需要注意的是，匿名内部类在创建对象时会隐式地实例化一个新的类，因此在性能和内存使用方面可能有一些开销。
    * 因此，如果需要在多个地方重复使用相同的实现或继承关系，建议使用命名的内部类或独立的类来实现。
    */

    public static void main(String[] args) {
//匿名内部类在开发中的使用
//当发现某个方法需要，接口或抽象类的子类对象，
//我们就可以传递一个匿名内部类过去，来简化传统的代码

        new Inter(){

            @Override
            public void method() {
                System.out.println("我是匿名内部类");
            }
        }.method();//直接调用方法
    }

}
