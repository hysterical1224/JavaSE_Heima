package com.company.neibulei.jiekou_canshu;
//内部类概念
//在一个类中定义一个类。
//举例：在一个类A的内部定义一个类B，类B就被称为内部类
/*
 格式：
    class 外部类名{
     修饰符 class 内部类名{

     }
    }
*/

//内部类的访问特点
//内部类可以直接访问外部类的成员，包括私有
//外部类要访问内部类的成员，必须创建对象



public class Outer {
    /*
*内部类是定义在另一个类内部的类。它具有一些特殊的应用场景和优势，如下所示：

*封装：内部类可以访问其外部类的私有成员，包括私有字段和方法。这样可以实现更严格的封装，将相关的类和功能组织在一起，同时限制对外部类的访问。

*实现细节隐藏：通过将一些实现细节隐藏在内部类中，可以减少对外部类的暴露。这样可以提高代码的模块性和可维护性。

*实现多重继承：在 Java 中，一个类只能继承一个父类，但可以实现多个接口。内部类可以在一个类中实现多个接口，从而达到类似多重继承的效果。

*事件监听器：内部类常被用作事件监听器，特别是在图形用户界面 (GUI) 开发中。通过将事件监听器作为内部类，可以方便地访问外部类的状态和方法，同时将事件处理逻辑封装在内部类中。

*匿名内部类：匿名内部类是一种没有显式命名的内部类。它常用于创建实现某个接口或继承某个类的对象，并且只在特定场景下使用一次。匿名内部类可以简化代码，特别是在需要创建简单的回调函数或事件处理器时非常有用。

*需要注意的是，虽然内部类具有一些应用场景和优势，但过度使用内部类可能会导致代码的复杂性增加。在设计和编写代码时，应根据具体情况权衡使用内部类的利弊，并遵循良好的设计原则和代码组织原则。

    * */
    private int num = 10;
     private class Inner{
         public void show(){
            System.out.println(num);
        }
     }
        public void method(){
            Inner i = new Inner();
            i.show();

    }

}

/*
* 成员内部类的定义位置
在类中方法，跟成员变量是一个位置
外界创建成员内部类格式
格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象;
举例：Outer.Inner oi = new Outer().new Inner();
成员内部类的推荐使用方案
将一个类，设计为内部类的目的，大多数都是不想让外界去访问，所以内部类的定义应该私有化，私有
化之后，再提供一个可以让外界调用的方法，方法内部创建内部类对象并调用。
*
*
*
*
*
*
*
* */

