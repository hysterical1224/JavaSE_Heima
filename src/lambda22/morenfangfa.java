package lambda22;

public class morenfangfa {
    /**
     * Java 中的默认方法（Default Methods）是指接口中可以包含具有默认实现的方法。默认方法是在 Java 8 中引入的新特性。
     * 在之前的 Java 版本中，接口只能包含抽象方法的声明，即只能定义方法的签名而不提供具体的实现。这导致了一些问题，例如当需要向现有的接口添加新方法时，所有实现该接口的类都必须提供该方法的实现，这可能会破坏现有的代码。
     * 为了解决这个问题，Java 8 引入了默认方法。默认方法是在接口中定义的具有默认实现的方法。默认方法使用 default 关键字进行修饰，在接口中可以直接提供方法的实现，而不需要实现类必须提供该方法的具体实现。
     * 接口的默认方法可以被继承和使用，实现类可以选择重写默认方法来提供自定义的实现，也可以直接继承默认方法的实现。
     * 默认方法的引入使得接口具备了一定的实现能力，可以向现有的接口添加新方法，而不会破坏已有的代码。它还提供了一种在接口中定义通用行为的方式，以便多个实现类共享相同的默认实现。
     * 需要注意的是，默认方法只能在接口中定义，而不能在普通的类或抽象类中定义。默认方法可以被继承、重写和调用，可以在接口的实现类中直接使用或通过接口类型引用调用。
     * 总之，Java 中的默认方法允许接口包含具有默认实现的方法，以解决向现有接口添加新方法的问题，并为接口提供一定的实现能力。
     * */
    public static void main(String[] args) {
        Runnable runnable = System.out::println;

        //默认方法不是抽象方法，所以不强制被重写。但是可以被重写，重写的时候去掉default关键字
        //public可以省略，default不能省略
        //静态方法只能通过接口名调用，不能通过实现类名或者对象名调用
        //public可以省略，static不能省略
        //静态方法只能在接口中定义和实现，并不能在接口的实现类中进行重写。因此，无论实现类如何定义，都无法改变接口中静态方法的实现。

        //默认方法可以调用私有的静态方法和非静态方法
        //静态方法只能调用私有的静态方法

        /**
         * 静态方法的目的：
         *
         * 提供与接口相关的实用工具方法：静态方法可以在接口级别上提供一些与接口相关的实用方法，这些方法与具体的实现类无关，可以直接通过接口名称调用。
         * 提供默认的行为：静态方法可以在接口中提供一些默认的实现逻辑，这样实现类可以选择继承该默认实现或者根据自己的需求进行重写。
         *
         * 私有方法的目的：
         * 代码复用和维护：私有方法可以在接口中定义一些辅助性的方法，用于在接口的默认方法或静态方法中进行代码复用，从而提高代码的可维护性和可读性。
         * 封装复杂逻辑：私有方法可以将复杂的逻辑封装在接口内部，对外部使用者隐藏实现细节，提供更清晰简洁的接口方法。
         * 避免命名冲突：私有方法可以在接口内部定义，不会与实现类的方法产生命名冲突，避免了命名空间的问题。
         *
         * */



    }
}
